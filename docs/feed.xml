<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-05-26T12:23:48+02:00</updated><id>/feed.xml</id><title type="html">ByteWelder</title><subtitle>Learnings, experiments and projects.
</subtitle><entry><title type="html">Building a handheld PC</title><link href="/posts/2023/05/20/building-a-handheld-pc.html" rel="alternate" type="text/html" title="Building a handheld PC" /><published>2023-05-20T23:00:00+02:00</published><updated>2022-05-26T13:30:00+02:00</updated><id>/posts/2023/05/20/building-a-handheld-pc</id><content type="html" xml:base="/posts/2023/05/20/building-a-handheld-pc.html"><![CDATA[<p>I’d like to share with you my latest project: Decktility!</p>

<!--more-->

<p>For several years, I’ve been looking for a project where I could dump a bunch of creativity in.
A project of my own, that would be challenging and rewarding. Preferrably a project that combines
electronics and software.
Handheld PCs always had a special place in my heart. Palm III was my first one, and a bit later I got my hands on a Sharp HC-4500.
I was intrigued by the <a href="https://yarh.io/">Yarh.io</a> projects and early this year I considered buying
a <a href="https://www.clockworkpi.com/uconsole">uConsole</a>. The uConsole was supposed to be shipped in
March, but currently it’s still pending. So with a bunch of ideas and motivation, I started my own handheld PC project: Decktility.</p>

<h1 id="initial-design-criteria">Initial design criteria</h1>

<p>I wanted to challenge myself and push the boundaries of homebrew solutions.
The Yarh.io Micro 2’s design was too crude for my taste. It was clearly limited by the hardware availability
at the time of development. The Yarh.io documentation gave me a good understanding of what I was about to embark on.
I set out to make device that looked more refined. I wanted the end result to be sufficiently light, and the battery life had to
be at least a couple of hours.</p>

<p>At this point, I was already considering the BigTreeTech Pad 5 as a foundation, as this was the thinnest
touchscreen and Pi combination that I could find. It seemed logical that I wasn’t going to make a foldable device.
Making a foldable device would pose several problems:</p>

<ul>
  <li>The Pad 5 would introduce about <code class="language-plaintext highlighter-rouge">15 mm</code> thickness on one side, while the side with the keyboard would be
at least about <code class="language-plaintext highlighter-rouge">20 mm</code> thick considering an <code class="language-plaintext highlighter-rouge">18 mm</code> 18650 battery cell and a case. <code class="language-plaintext highlighter-rouge">35 mm</code> would not be
acceptable. I considered a regular flat lipo, but I didn’t like that they get spicy when they short-circuit.</li>
  <li>Hinges are difficult to implement well. The screen part would be heavy, and you don’t want it to open/close while typing.</li>
</ul>

<p>So the decision was made: it was going to be a package size similar to Yarh.io Mini 2 and uConsole.</p>

<h1 id="prototyping">Prototyping</h1>

<p>Before starting the 3D design, I bought some basic components online. This allowed me to measure them,
so I could get an idea of how much space each component would take up.
It also enabled me to start building up a prototype:</p>

<p><img src="/assets/images/posts/decktility/prototyping.jpg" alt="prototyping bms" class="center" /></p>

<p>Just like the wiring in the assembly guide, I started by building up the power delivery:
A USB battery management system (BMS) that can charge two 18650 lithium cells, paired with a
<code class="language-plaintext highlighter-rouge">5 V</code> step down converter as the Pi, keyboard and fan would require <code class="language-plaintext highlighter-rouge">5 V</code>.
I used a USB-C PD tester to verify the power while charging.</p>

<p>Once that was working, I added some breadboard wires and connected the Pi:</p>

<p><img src="/assets/images/posts/decktility/prototyping-with-pi.jpg" alt="prototyping bms with pi" class="center" /></p>

<p>I found out that that the BMS was getting quite hot while charging. It was stepping up the <code class="language-plaintext highlighter-rouge">5 V</code> from USB
to about <code class="language-plaintext highlighter-rouge">8.4 V</code> that the batteries require. Increasing the voltage is much less efficient than decreasing it,
so there is more heat involved. This implied that I would need to accomodate cooling for this scenario.
<code class="language-plaintext highlighter-rouge">45 C</code> is not too bad in open air, but it wouldn’t be great in an enclosure, where the Pi would generate heat too.</p>

<p><img src="/assets/images/posts/decktility/prototyping-bms-heat.jpg" alt="prototyping bms flir heat signature" class="center" /></p>

<p>In theory, having a battery, a switch and a Pi is going to result in a working product,
but what if the battery was running low? If the power switch would remain on, it would drain and damage the battery.
To solve this problem, I introduced an Arduino Nano. The Arduino would end up doing many things, but it started 
with reading the voltage from the battery. To do this, I added two resistors with a high resistance value,
because they would always be connected to the battery and thus leak power. By selecting <code class="language-plaintext highlighter-rouge">2.2M R</code> and <code class="language-plaintext highlighter-rouge">3.9 MR</code>,
they would leak only <code class="language-plaintext highlighter-rouge">0.82 μA</code> (5 / (2200000 + 3900000)). That’s about <code class="language-plaintext highlighter-rouge">4.1 μW</code>, or in other words: it would take
<code class="language-plaintext highlighter-rouge">203252 days</code> to drain a <code class="language-plaintext highlighter-rouge">20 Wh</code> battery. It’s not going to be problematic this way.</p>

<p><img src="/assets/images/posts/decktility/prototyping-arduino.jpg" alt="prototyping with arduino to read voltage" class="center" /></p>

<p>Now that we know when it’s safe to turn on the hardware, I had to add the ability to actually do so.
I used a special kind of transistor - a power MOSFET (or “power FET”).
The green PCB behind the cable mess holds the FET circuit:</p>

<p><img src="/assets/images/posts/decktility/prototyping-fet.jpg" alt="prototyping with arduino and fet" class="center" /></p>

<p>Around this time, I started designing the CAD prototypes in OnShape. Many hours were spent measuring and drawing
various components that would go into Decktility. I needed their 3D representation so I could do an integration
test of sorts as I was creating the case:</p>

<p><img src="/assets/images/posts/decktility/decktility-cad-prototypes.png" alt="cad  prototypes" class="center" /></p>

<p>In the early stages, I had to solve the dilemma of battery placement. Firstly, the battery had to be a counter-weight
to the screen. It’s important that the device feels balanced in your hands. The screen and the battery are both quite heavy,
so they cannot be on one side of the device.</p>

<p>I thought of 2 options for the battery: Either on the sides, as to create handles to grab the device,
or I near the bottom center of the case.
Having them on the sides would require two separate battery holders, and it would create a minimum height of about <code class="language-plaintext highlighter-rouge">7.5 cm</code>
for the bottom half of the device. I really liked the idea of the handles, but the downsides resulted in chosing the alternative setup.</p>

<h1 id="building">Building</h1>

<p>After working out the basic case design, it was time to print the first one. The first of many…</p>

<p><img src="/assets/images/posts/decktility/building-first-case.jpg" alt="first case 3D-printed" class="center" /></p>

<p>The massive FET board quickly catches the eye. The board in the picture is just to showcase how out-of-place it really is.
I swapped it with a smaller one before continueing.</p>

<p>Swapping the FET board was harder than I thought. There are many pre-built modules available, but 
most of them are built with N-FETs and not P-FETs. The N-FET boards are cheaper and easier to build,
and result in an electronic switch that switches the GND wire. I would later find out that I need
a P-FET, because I need a common ground connected at all times for the Arduino logic and the Pi logic
to work together (for I2C communication).</p>

<p>In the end, I couldn’t find a small enough FET board, so I started reverse-engineering the existing one in my very first KiCad project:</p>

<p><img src="/assets/images/posts/decktility/building-fet-kicad.png" alt="reverse-engineering the FET board in kicad" class="center" /></p>

<p>and then rebuilding it on an experiment board:</p>

<p><img src="/assets/images/posts/decktility/building-fet-comparison.jpg" alt="comparing original FET with rebuilt one" class="center" /></p>

<p>I might make a custom PCB in the future. That way, I can add some connectors for various components, making the project easier
to assemble.</p>

<p>Before the custom FET board, I was able to get most of the basic components working before adding the Pi to the mix.
I would quickly find out that I didn’t have the correct wire thickness for the main power. I was using <code class="language-plaintext highlighter-rouge">20 AWG</code>, which I use
for drones that draw way more power. I would later replace them with <code class="language-plaintext highlighter-rouge">24 AWG</code> wires.</p>

<p><img src="/assets/images/posts/decktility/building-first-power-on.jpg" alt="first time turning on the power" class="center" /></p>

<p>When I was working on the Arduino firmware, I had a problem: every time I would upload a new firmware, the Arduino would restart.
This would make the electronic switch go off, and thus restart the Pi. To overcome this, I would wire a second Arduino to I2C,
isntead of using the one in the device. At a later stage, I also added a JST-SH connector to be able to easily disconnect the
Arduino inside the device.</p>

<p><img src="/assets/images/posts/decktility/building-two-arduinos.jpg" alt="two arduinos during firmware development" class="center" /></p>

<p>Charging status LEDs would be a nice touch. But adding 1 or 2 LEDs to the case would require a relatively considerable effort.
And then it hit me: I could use fiber optics! Fishing wire (or flexible bracelet wire) can guide the light from the existing LEDs
on the BMS to the edge of the case.
All I would have to do is glue the wire in place. An overnight shipping and a quick experiment later, the theory was proven:</p>

<p><img src="/assets/images/posts/decktility/building-charging-leds.jpg" alt="using transparent wire to guide light" class="center" /></p>

<p>After a lot of iterations, the hardware was finally finished:</p>

<p><img src="/assets/images/posts/decktility/building-finished.jpg" alt="decktility finished" class="center" /></p>

<p>At this point, a custom I2C device implementation was enabling the Pi and the Arduino to talk to eachother. 
The Pi could ask the Arduino about the charging status or the battery voltage, and the Arduino would report it back.
I started investigating how to integrate it into a Linux desktop, so I read about dbus and upower.
At first, the intention was to write a custom kernel driver, but then it hit me:
What if I change my Arduino firmware so that it acts like an already supported Linux device?
I did some research and settled on the LTC294x “Battery Fuel Gauges” implementation. It was one of the very few
power-related Linux kernel drivers that were avaible in Raspberry Pi OS.
The Arduino now acts like such a device, so it is fully supported in Linux.</p>

<p>I was stoked when I saw the battery icon appear for the first time:</p>

<p><img src="/assets/images/posts/decktility/building-battery-status.jpg" alt="decktility finished" class="center" /></p>

<h1 id="various-learnings">Various learnings</h1>

<p>Here’s a quick summarization of some noteworthy learnings that aren’t covered above:</p>

<p>As mentioned before, <strong>airflow</strong> was important. I had to cool the BMS board and also the Pi. Some holes for airflow would be insufficient.
I ended up roughly aligning my components in the direct airflow of the fan. This ended up also as a bit of a constraint on the rest of
the electronics design, as I wouldn’t be able to easily move the BMS board anymore.</p>

<p><strong>Less fasteners(/parts) is better</strong>: The best fastener is the one you don’t need. If you create a groove and latch mechanism to save
yourself some parts, it might be worth it! The cost for me was added complexity in the design.</p>

<p><strong>Designing for …</strong> 3D printers? Or CNC milling? The plan was to initially make a 3D printed case and then later attempt an aluminum
CNC-milled case. Designing for 3D printers is very different. It would require changes to make the cases millable on a 3 axis mill.</p>

<p><strong>Electronics placement is difficult</strong>: Next to the airflow considerations, you also have to consider the amount of wiring needed to
connect all the parts. I also wanted to make the build as small as I could. Finding the best trade-off is not an easy task.
Then there is theory versus usability: Your SD card might fit in the slot, but is it easy to pull it out? Can you grip it with your nail?</p>

<p><strong>3D printing - Chamfer is life</strong>: I used chamfers on overhangs as to not require support when 3D printing them. I also used chamfers on certain edges
near case openings (e.g. ethernet and GPIO connectors), to slide objects into the case more easily.</p>

<p><strong>3D printing - Manual painted-on supports</strong>: These are very handy if you have lots of overhangs, but only some of them need support. (used with SuperSlicer/PrusaSlicer)</p>

<p><strong>3D printing - Parts can flex</strong>: If you make a battery tray, the pressure of the battery inside the case might budge it outward.
This can result in your battery tray not being placeable when batteries are in it. More importantly: you should measure the flex
and see if it’s bending outwards too much, because you don’t want a critical failure with lithium cells.</p>

<p><strong>Use SSH to the fullest</strong>: I increased my dev cycle by using remote commands. I could execute my local Python remotely with <code class="language-plaintext highlighter-rouge">ssh me@cyberdeck 'python' &lt; powermanager.py</code></p>

<p><strong>Raspberry Pi 4 has more than two I2C buses</strong>: When you fry your CM4 I2C bus, you can <a href="https://medium.com/cemac/creating-multiple-i2c-ports-on-a-raspberry-pi-e31ce72a3eb2">use other GPIO pins to create extra I2C ports</a>.</p>

<p><strong>Naming your project matters</strong>: While “Decktility” is probably not the best name out there, it is a good name because it’s easy to remember,
and it’s a unique name so an online search will easily turn up the correct results. You can use ChatGPT to help you find a good name.
(Decktility refers to ductility/utility, where ductility is a wink towards the <em>welder</em> part in my online persona)</p>

<h1 id="closing-words">Closing words</h1>

<p>If you want more details, check out the <a href="https://github.com/ByteWelder/Decktility">Decktility GitHub repository</a>.</p>]]></content><author><name></name></author><category term="posts" /><summary type="html"><![CDATA[I’d like to share with you my latest project: Decktility!]]></summary></entry><entry><title type="html">OpenPyrojet Print Head Prototype</title><link href="/posts/2022/04/15/openpyrojet-print-head.html" rel="alternate" type="text/html" title="OpenPyrojet Print Head Prototype" /><published>2022-04-15T18:00:00+02:00</published><updated>2022-04-16T18:38:00+02:00</updated><id>/posts/2022/04/15/openpyrojet-print-head</id><content type="html" xml:base="/posts/2022/04/15/openpyrojet-print-head.html"><![CDATA[<p>A few weeks ago, I joined the <a href="https://openpyrojet.com">OpenPyrojet</a> project.
OpenPyrojet intends to build 3D printer technology based on thermal spraying.
In this post, I’ll show you how I assembled the print head prototype.</p>

<!--more-->

<p>This is what the finished print head looks like:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/17-assembled-front.jpg" alt="front view of assembled print head" class="center" /></p>

<h1 id="how-does-the-printer-work">How does the printer work?</h1>

<p>The feedstock of the printer is a mix of micrometer-sized particles
(e.g. metals or ceramics) with a fuel source like IPA or naphtha.
A monofilament wire is inside the fuel chamber. Heating the wire creates a hot
gas, which is then pushed out of a nozzle, mixes with air and catches fire.
Due to the heat, the metal melts and hits a surface (substrate) to which it attaches.</p>

<h1 id="lets-begin">Let’s begin!</h1>

<p>To build a strong print head, we’re using multiple layers made from PCBs.
These layers are stacked in the order as they are laid out below:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/01-pcb-overview.jpg" alt="all pcb parts" class="center" /></p>

<p>I first prepared the inlet and outlet. I need to connect Viton tubing to the
print head, so I’m soldering small copper pipes (<code class="language-plaintext highlighter-rouge">3 mm</code> diameter) to the PCB.
The picture shows a larger copper pipe, because I used the wrong size when taking pictures:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/02-inlet-outlet-prep.jpg" alt="pcb with inlet, outlet and copper pipes" class="center" /></p>

<p>I started with adding solder to the pads:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/03-inlet-outlet-pre-solder.jpg" alt="inlet pad with some solder" class="center" /></p>

<p>Initially, the solder will likely not connect neatly all around the copper pipe.
It might look like the picture below. I take some extra solder on my iron and
then place the iron at the base of the copper pipe to fix this issue:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/05-inlet-outlet-solder-bad-connection.jpg" alt="copper pipe with bad solder connection" class="center" /></p>

<p>Another problem that might occur is when your solder smudges.
I cleaned it off by wiping my (cleaned) soldering iron on it.
It’s not problematic if there is some solder on the side,
but I have to make sure it’s not sharp.
That way, it won’t cut the Viton tubing later on:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/06-inlet-outlet-solder-smudges.jpg" alt="solder smudged on copper pipe" class="center" /></p>

<p>When I used too much solder, the inlet became too narrow. I could’ve desoldered
it. Instead, I used a set of drills to carefully drill it out by hand.
I kept increasing the drill diameter by <code class="language-plaintext highlighter-rouge">0.1 mm</code> until the diameter was the right size:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/07-inlet-outlet-solder-narrow.jpg" alt="pcb with narrow inlet" class="center" /></p>

<p>Finally, I had a neat collar on the copper pipe:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/04-inlet-outlet-solder-good.jpg" alt="copper pipe on pcb with solder" class="center" /></p>

<p><img src="/assets/images/posts/openpyrojet-print-head/08-inlet-outlet-solder-finished.jpg" alt="finished inlet and oultet on pcb" class="center" /></p>

<p>The next step was to put the monofilament on one of the PCB layers. This monofilament
is what heats up the fuel, which causes the fuel to eject through the nozzle.
The filament gets sandwiched between the nozzle PCB and the PCB that holds the connector.
I store the filament in a folded sheet of paper:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/09-filament-prep.jpg" alt="monofilament displayed" class="center" /></p>

<p>First I cut the filament to size. We make it as wide as possible, so the thickness
of the glue won’t interfere with the electrical conductivity:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/10-filament-cut.jpg" alt="monofilament cut" class="center" /></p>

<p>Combining them is tricky, because the filament won’t lay still on a flat surface.
I used some CA glue on the edges to keep it into place. I learned later that
glue is not the ideal way. In the future, I will tape it near the edges if the PCB
with some kapton tape.</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/11-filament-glued.jpg" alt="monofilament glued to PCB" class="center" /></p>

<p>The nozzle PCB layer had holes that were too small in diameter. I widened them
by hand with some cheap drills, slowly increasing the diameter <code class="language-plaintext highlighter-rouge">0.1 mm</code> at a time:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/12-nozzle-prep.jpg" alt="nozzle PCB with drill in it" class="center" /></p>

<p>When attaching the nozzle PCB to the connector PCB, I start with a single row of screws:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/13-nozzle-initial-screws.jpg" alt="nozzle PCB on connector PCB with a single row of screws" class="center" /></p>

<p>It’s important to tighten the screws evenly, so initially all screws are kept loose.
I then tightened them carefully and as evenly as possible. When everything stops sliding
around, I start measuring resistance before continueing to tighten further.
The resistance measurements are repeated until the values are in an acceptable range.</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/14-nozzle-all-screws.jpg" alt="nozzle PCB on connector PCB with all screws" class="center" /></p>

<p>I had to make sure that the nozzle plate wasn’t crooked, like in the picture below:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/15-nozzle-bad-alignment.jpg" alt="nozzle PCB badly aligned with connector PCB" class="center" /></p>

<p>The prepared PCBs are ready to be combined. I took 8 pieces of <code class="language-plaintext highlighter-rouge">M2 x 10mm</code> and
some <code class="language-plaintext highlighter-rouge">M2</code> nuts to match. I also used medium-strength loctite:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/16-all-layers-ready.jpg" alt="all layers finished, displayed with M2 hardware and loctite" class="center" /></p>

<p>At this point, I have a finished physical assembly:</p>

<p><img src="/assets/images/posts/openpyrojet-print-head/17-assembled-front.jpg" alt="front view of assembled print head" class="center" /></p>

<p><img src="/assets/images/posts/openpyrojet-print-head/18-assembled-back.jpg" alt="back view of assembled print head" class="center" /></p>

<p><img src="/assets/images/posts/openpyrojet-print-head/19-assembled-side.jpg" alt="side view of assembled print head" class="center" /></p>]]></content><author><name></name></author><category term="posts" /><summary type="html"><![CDATA[A few weeks ago, I joined the OpenPyrojet project. OpenPyrojet intends to build 3D printer technology based on thermal spraying. In this post, I’ll show you how I assembled the print head prototype.]]></summary></entry><entry><title type="html">Hobby CNC electronics</title><link href="/posts/2021/12/28/hobby-cnc-electronics.html" rel="alternate" type="text/html" title="Hobby CNC electronics" /><published>2021-12-28T00:00:00+01:00</published><updated>2021-12-28T00:00:00+01:00</updated><id>/posts/2021/12/28/hobby-cnc-electronics</id><content type="html" xml:base="/posts/2021/12/28/hobby-cnc-electronics.html"><![CDATA[<p>I recently started building an <a href="https://indystry.cc/indymill/">IndyMill</a> CNC router.
In this post, I’ll share some progress and decisions I’ve made when working on the electronics cabinet of this build.</p>

<!--more-->

<p>Please note that everything written below is written in the context of hobbyist CNC router hardware.</p>

<p><img src="/assets/images/posts/indymill-cabinet-finished-open.jpg" alt="cabinet finished and opened" class="center" /></p>

<h2 id="a-brief-intro-to-hobby-cnc-routers">A brief intro to hobby CNC routers</h2>

<p>A CNC router (or mill) is not a complex machine. Its main job is to move a spindle (~ drill) along the X, Y and Z axis at a specific speed. In a hobby router, you generally use stepper motors, just like you would in a 3D printer - albeit perhaps more powerful ones.</p>

<p>These stepper motors require a lot of power, so they are controlled by <em>drivers</em>. A driver is a device that gets low voltage input signals and translates it into high voltage power signals for the stepper motors.</p>

<p>The drivers themselves are controllerd by a <em>controller</em>. The controller is the heart and brains of the CNC mill: It translates a “job” into signals that it sends to the drivers.</p>

<p>A CNC “job” is defined by “gcode” file. This contains all the commands for the machine to execute. A basic command could be something like “move the spindle 2mm along the X axis”.</p>

<p>There are few more bits and pieces that I’m not talking about here, but these are the main things a hobbyist CNC router is about.</p>

<h1 id="choosing-a-cabinet">Choosing a cabinet</h1>

<p>The first hard part is to find a cabinet that fits your needs. Here were some of my considerations:</p>
<ul>
  <li>Large enough (to work comfortably and to have space for upgrades)</li>
  <li>Affordable (cabinets often cost hundreds of euros)</li>
  <li>Easy to work with (drilling holes)</li>
</ul>

<p>I settled on a cabinet from the German company <code class="language-plaintext highlighter-rouge">BoxExpert</code>. I chose the <code class="language-plaintext highlighter-rouge">600 x 400 x 200 mm</code> size. It comes with a transparent door that allows me to see the status LEDs of the hardware inside, and it comes with a metal plate to mount hardware on. I paid about <code class="language-plaintext highlighter-rouge">82 EUR</code> including shipping, so that was reasonable.</p>

<h1 id="mounting-options">Mounting options</h1>

<p>Initially, the plan was to mount the hardware directly to the plate. This has one major issue: you can’t change the layout at a later time. Imagine having to start drilling holes into it while there’s already hardware mounting!</p>

<p><a href="https://en.wikipedia.org/wiki/DIN_rail">DIN-rails</a> were the answer to this! Not only did they help with strengthen the steel mounting plate, they allow me to change the entire setup freely at any time. There are lots of helpful DIN-compatible components out there that helped me in making my build clean.</p>

<h1 id="cabinet-layout">Cabinet Layout</h1>

<p>To make the cabinet layout, I used <a href="https://inkscape.org/">InkScape</a>. A vector graphics editor like that (or Affinity Designer and many others) is ideal for me: I created a <code class="language-plaintext highlighter-rouge">600 x 400</code> pixel image, where each pixel represents a millimeter. The end result looks like this:</p>

<p><img src="/assets/images/posts/indymill-cabinet-layout.png" alt="cabinet layout design" class="center" /></p>

<p>The yellow marked areas are space in the box that is unusable.</p>

<p>Some considerations included:</p>
<ul>
  <li>Separating high power components from lower power components</li>
  <li>Separating AC from DC components</li>
  <li>Ensuring everything is grounded</li>
</ul>

<h1 id="cabinet-airflow">Cabinet Airflow</h1>

<p>Although airflow isn’t super critical, it’s important to have at least some. We’re not generating a lot of heat inside the cabinet, but since it’s a water-proof cabinet, we want to create some airflow.</p>

<p>I wanted to have a rough idea of how different kinds of airflow would behave, so I used the free tier of <a href="https://www.simscale.com/">SimScale</a> to model some scenarios. Simulating airflow for the cabinet is overkill for a project like this, but it was fun to experiment with.</p>

<p>The first design has an intake fan on the bottom of the cabinet and an exit hole on the top-left. The downside of this designis that we can’t put the cabinet on a flat surface without obstructing the airflow:</p>

<p><img src="/assets/images/posts/indymill-airflow1.png" alt="airflow design 1" class="center" /></p>

<p>The second design has an intake fan on the bottom-left and the outtake hole on the top-left:</p>

<p><img src="/assets/images/posts/indymill-airflow2.png" alt="airflow design 2" class="center" /></p>

<p>The last design is the one I ended up chosing, but both were viable options.</p>

<h1 id="mounting-the-din-rails">Mounting the DIN rails</h1>

<p>The first real build step was mounting the DIN rails on the steel plate of the cabinet.
I used a medium-strength thread lock for the nuts and bolts. I also ensured that the plate could be grounded by drilling an extra hole for grounding.</p>

<p><img src="/assets/images/posts/indymill-din-rails-mounted.jpg" alt="base plate with din rails mounted" class="center" /></p>

<h1 id="mounting-the-first-components">Mounting the first components</h1>

<p>Once the rails were ready, it was time to try out the first components: The top row has all 4 stepper drivers, connected to the power supply below. I’m using <code class="language-plaintext highlighter-rouge">Wago</code> clamps to tie it all together. The power cord is temporary:</p>

<p><img src="/assets/images/posts/indymill-first-din-components.jpg" alt="din plate with first components mounted" class="center" /></p>

<h1 id="din-mounting-options">DIN mounting options</h1>

<p>There are a lot of DIN parts on <a href="https://www.thingiverse.com/">Thingiverse</a>. A lot of the DIN brackets that I used come from there. Some of them were custom. The controller and fan brackets are a remix of an existing ones on Thingiverse:</p>

<p><img src="/assets/images/posts/indymill-controller-close-up.jpg" alt="main controller close-up" class="center" /></p>

<p><img src="/assets/images/posts/indymill-fan-controller.jpg" alt="fan controller close-up" class="center" /></p>

<h1 id="finish-mounting-the-components">Finish mounting the components</h1>

<p>The CNC controller that I’m using as <a href="https://www.makerfr.com/en/cnc/grbl-32bits-board-v2/">Grbl32bits</a> board from Makerfr. I’ve mounted it together with its power supply and the fan controller in the below picture:</p>

<p><img src="/assets/images/posts/indymill-all-components-mounted.jpg" alt="all DIN components mounted on a steel plate" class="center" /></p>

<h1 id="finishing-the-cabinet">Finishing the cabinet</h1>

<p>The next step was drilling holes in the cabinet to facilitate all the connectors:</p>

<p><img src="/assets/images/posts/indymill-cabinet-holes.jpg" alt="cabinet with holes visible" class="center" /></p>

<p>In case you are wondering: yes, that is indeed my living room table being used as a workbench. My wife is awesome for putting up with it.</p>

<p>After everything is wired up, the cabinet is finished!</p>

<p><img src="/assets/images/posts/indymill-cabinet-finished-right.jpg" alt="cabinet view from the right" class="center" /></p>

<p><img src="/assets/images/posts/indymill-cabinet-finished-closed.jpg" alt="cabinet with lid closed" class="center" /></p>

<p><img src="/assets/images/posts/indymill-cabinet-finished-open.jpg" alt="cabinet with lid open" class="center" /></p>

<p>You can find my collection of 3D printable parts <a href="https://www.thingiverse.com/kenvanhoeylandt/collections/cnc">here</a>.</p>]]></content><author><name></name></author><category term="posts" /><summary type="html"><![CDATA[I recently started building an IndyMill CNC router. In this post, I’ll share some progress and decisions I’ve made when working on the electronics cabinet of this build.]]></summary></entry><entry><title type="html">Designing for privacy: A thought experiment</title><link href="/posts/2021/09/05/designing-for-privacy.html" rel="alternate" type="text/html" title="Designing for privacy: A thought experiment" /><published>2021-09-05T00:00:00+02:00</published><updated>2021-09-05T00:00:00+02:00</updated><id>/posts/2021/09/05/designing-for-privacy</id><content type="html" xml:base="/posts/2021/09/05/designing-for-privacy.html"><![CDATA[<p>Apple’s <a href="https://www.apple.com/child-safety/pdf/CSAM_Detection_Technical_Summary.pdf">plans</a> have been widely <a href="https://appleprivacyletter.com/">critiqued</a>. This was breach of trust for me, and it made me reconsider my choices of software and hardware. It also made me think of how we, as software engineers, could do better in terms of privacy. Below is a thought experiment.</p>

<!--more-->

<h2 id="the-idea">The Idea</h2>

<p><strong>A software development platform, where the user is - by default - the sole owner of its data.</strong></p>

<p>For offline applications, this is easy. Anything you store on your own devices remains in your ownership. Any offline application automatically passes this criterium.</p>

<p>For online applications, this becomes a different story. Online applications imply that a server is a mediator that processes and likely also stores some of your data. There are few exceptions, such as instant messengers that implement <a href="https://en.wikipedia.org/wiki/End-to-end_encryption">E2EE</a>.</p>

<p>This made me wonder: What if we wrote more software on E2EE principles? What if a calendar or contacts service wouldn’t be able to read your calendar entries or contacts? And how do we move these concepts to more complex online applications? Sometimes the server simply <strong>must</strong> know some data. Even an E2EE messenger needs to have a basic understanding of the recipient that you want to communicate with. Or perhaps you want to expose calendar through CalDAV, or share an entry from your address book via email? We want the user to remain the sole owner of its data, but we should also give the freedom to open up that data.</p>

<h2 id="lets-get-more-specific">Let’s get more specific</h2>

<p>In my thought experiment, all user data is encrypted before handing it over to an online service.</p>

<p>This service can do few things:</p>

<h4 id="1-act-as-a-storage-system-for-encrypted-data-of-our-user">1. Act as a storage system for encrypted data of our user</h4>

<p>It acts as an online file system. The user’s applications can store their data here.</p>

<h4 id="2-act-as-a-proxybroadcasting-system-for-applications">2. Act as a proxy/broadcasting system for applications</h4>

<p>Applications can send encrypted data to other applications, within the user’s ownership.</p>

<p>For example: The user has a calendar application on their phone and on their desktop. When the user adds an address on their phone, the desktop needs to be notified to update its data.</p>

<h4 id="3-act-as-a-proxybroadcasting-system-for-other-service-hosts">3. Act as a proxy/broadcasting system for other service hosts.</h4>

<p>For example: The user has a calendar application and whishes to share a calendar event with to a friend.
This friend might be hosted on the same service, but he might also be hosting their own or use a third party to host it.</p>

<h2 id="authentication">Authentication</h2>

<p>If(!) this setup could work for various types of applications, we don’t want individual applications to have access to our secrets like our private key or password. This cryptographic secret is still required to be able to encrypt the data.
To fix this, we could introduce a “controller” application that runs on each device. Consider this controller similar to how you can log in with iCloud on your iPhone, giving all iCloud-enabled applications access to your iCloud data, but not your iCloud credentials or cryptographic secrets.</p>

<p>This controller would serve the following purpose:</p>

<ul>
  <li>The controller authenticates directly with the main service that holds/transfers our encrypted data.</li>
  <li>The controller is a proxy to the applications on the local system that the controller is running on. It exposes an API to enable this.</li>
  <li>Local applications must get permission to connect with the controller. This requires direct interaction, instigated by the controller’s UI.</li>
</ul>

<h2 id="mitigations-and-considerations">Mitigations and considerations</h2>

<ul>
  <li>Ensure that there is an upgrade path for cryptographic algorithms.</li>
  <li>Users <strong>must</strong> make sure to not lose their crypto secrets, because that would mean irreversible loss of access to their data.
We need to consider ways to easily backup passwords.
Perhaps we can consider having different types of passwords (e.g. word list, hex byte list, passphrase, etc.)</li>
  <li>The online service might be deployed by the users. There might be a need for such services to talk to each other.</li>
</ul>

<h2 id="closing-words">Closing words</h2>

<p>I’d like to hear your thoughts on this thought experiment, so feel free to contact me through twitter/email via <a href="https://kenvanhoeylandt.net">my main website</a>.</p>]]></content><author><name></name></author><category term="posts" /><summary type="html"><![CDATA[Apple’s plans have been widely critiqued. This was breach of trust for me, and it made me reconsider my choices of software and hardware. It also made me think of how we, as software engineers, could do better in terms of privacy. Below is a thought experiment.]]></summary></entry><entry><title type="html">Google Analytics IP anonymization is a joke</title><link href="/posts/2021/07/08/google-analytics-ip-anonymization-is-a-joke.html" rel="alternate" type="text/html" title="Google Analytics IP anonymization is a joke" /><published>2021-07-08T22:30:00+02:00</published><updated>2021-07-10T14:54:00+02:00</updated><id>/posts/2021/07/08/google-analytics-ip-anonymization-is-a-joke</id><content type="html" xml:base="/posts/2021/07/08/google-analytics-ip-anonymization-is-a-joke.html"><![CDATA[<p>Google Analytics, the popular data gathering and statistics analysis tool, has a feature called <em>IP Anonymization</em> or <em>IP Masking</em>.
The name is kind of a joke to me, because it isn’t nearly as anonymous as it sounds. Let’s take a deeper look at this feature!</p>

<!--more-->

<p>The best point to start with is the official <a href="https://support.google.com/analytics/answer/2763052">documentation</a>. In its current state (July 8, 2021) it tells us:</p>

<blockquote>
  <p>When a customer of Analytics requests IP address anonymization, Analytics anonymizes the address as soon as technically feasible. The IP anonymization feature in Analytics sets the last octet of IPv4 user IP addresses and the last 80 bits of IPv6 addresses to zeros in memory shortly after being sent to Google Analytics. The full IP address is never written to disk in this case.</p>
</blockquote>

<h2 id="whats-an-ip">What’s an IP?</h2>

<p>(feel free to skip ahead)</p>

<p>Your internet connection is identifyable by something that is called an “IP address” - or in short: “IP”. Most people have an IP that looks somewhat like this: <code class="language-plaintext highlighter-rouge">101.102.103.104</code>. For some devices and internet providers, this might change over time, but for many it stays the same over the course of years. This means that an IP can be used to help identify a user across the internet.</p>

<p>When you browse the web or use applications, your computer talks with various other machines and they can locate each other through these IP addresses. Google Analytics is one of those entities that you can communicate with.</p>

<h2 id="so-how-does-google-store-your-ip">So how does Google store your IP?</h2>

<p>When a computer is talking to Google Analytics and asks it to enable IP anonymization, something happens to it before Google stores it: the last part of that number series is removed - replaced by a <code class="language-plaintext highlighter-rouge">0</code>. If your IP would be <code class="language-plaintext highlighter-rouge">101.102.103.104</code>, then it would look like this after Google’s anonymization process: <code class="language-plaintext highlighter-rouge">101.102.103.0</code></p>

<p>The removed number is always in the range of <code class="language-plaintext highlighter-rouge">[0 - 255]</code>. This means that Google is only <code class="language-plaintext highlighter-rouge">256</code> guesses away from recovering your “anonymized” IP address! “Why is this a problem?” you might ask:</p>

<p><code class="language-plaintext highlighter-rouge">256</code>guesses aren’t a whole lot. It’s likely that Google stores other kinds of information along your IP. Data is the bread and butter that gets the analytics engine running after all. Let’s take a further look…</p>

<p>Firstly, when taking a look at the range of <code class="language-plaintext highlighter-rouge">.0</code> to <code class="language-plaintext highlighter-rouge">.255</code>, not all the related addresses are necessarily in use, which could reduce the sample set.</p>

<p>More likely, the program or website that is using analytics is sending other data through. A common data point is a “user agent”. The user agent is a short definition of what kind of software is contacting the server. It can look like this: <code class="language-plaintext highlighter-rouge">Homebrew/2.5.0 (Macintosh; Intel Mac OS X 10.15.6) curl/7.64.1</code>. Depending on how unique your computer configuration is, this mere user agent is possibly unique enough to detect your computer in a group of at most <code class="language-plaintext highlighter-rouge">256</code> machines.</p>

<p>A user agent is just 1 data point. There are many more that one can think of to help define a user uniquely, and that are consistent across various applications or websites.</p>

<h2 id="why-is-this-problematic">Why is this problematic?</h2>

<h3 id="privacy">Privacy</h3>

<p>With sufficient data, Google has the ability to de-anonymize those IP addresses. With a known IP - especially combined with more data - one could easily cross-reference data from users across services.</p>

<p>We don’t know if Google does this, but we should be aware of the inherent risks of using Google Analytics. Both as a customer who runs Google Analytics with their software, and as an end-user who is browsing the web.</p>

<p>Even with the partial IP, Google can still make a rough estimate of your physical location. The documentation explains:</p>

<blockquote>
  <p>Geographic dimensions are later derived from anonymized IP addresses.</p>
</blockquote>

<h3 id="the-power-of-words">The power of words</h3>

<p>While technically, the anonymization technique of Google <em>does</em> anonymize the IP address, it does so very poorly. Only partial anonymization is happening. Calling it that gives a false impression.</p>

<p>If someone would post your mobile phone number with only the last 2 digits removed in a public space, it would be easy for a caller to try all 100 numbers and see which one is the one where you pick up. Would you consider such a phone number <em>anonymous</em>? I know I wouldn’t.</p>

<h2 id="so-what-can-we-do-about-it">So what can we do about it?</h2>

<p>The average person on the web could pick one of the popular browser extensions to block advertisements and analytics, such as <a href="https://ublockorigin.com/">uBlock Origin</a> and <a href="https://alternativeto.net/software/ublock-origin/">many more</a>.
Web developers could reconsider using Google Analytics. Google could use more clear language or it could simply not store partial IP addresses.</p>

<h2 id="ipv6">IPv6</h2>

<p>So what about IPv6? Luckily, Google did better here: when IP anonymization is applied, the last <code class="language-plaintext highlighter-rouge">80 bits</code> of data are removed.
This gives a massively larger pool of possible addresses when attempting to recover an IP.</p>

<p>However, since most internet users use IPv4, this is not very relevant.</p>]]></content><author><name></name></author><category term="posts" /><summary type="html"><![CDATA[Google Analytics, the popular data gathering and statistics analysis tool, has a feature called IP Anonymization or IP Masking. The name is kind of a joke to me, because it isn’t nearly as anonymous as it sounds. Let’s take a deeper look at this feature!]]></summary></entry><entry><title type="html">Thoughts on multiplayer networking</title><link href="/posts/2020/10/07/thoughts-on-multiplayer-networking.html" rel="alternate" type="text/html" title="Thoughts on multiplayer networking" /><published>2020-10-07T23:00:00+02:00</published><updated>2019-08-13T17:57:00+02:00</updated><id>/posts/2020/10/07/thoughts-on-multiplayer-networking</id><content type="html" xml:base="/posts/2020/10/07/thoughts-on-multiplayer-networking.html"><![CDATA[<p>The topic of gaming and networking was brought up on the <a href="https://korge.org">KorGE</a> Discord server.
This made me think about the various forms of networking stacks that I’ve encountered in the past years, and some of the different
considerations for their development.</p>

<p>The intention of this article is to give a glimpse into various approaches and considerations. It’s likely not complete or perfect,
but I hope it will be useful for developers that are somewhat new to networking for games.</p>

<!--more-->

<h2 id="serverless">Server(less)?</h2>

<p>Does your game logic require a central server to host your game?
How much centralized control does your game need?
And how much control are you willing to cease to the local machine, a third party or even one of your players?
Answering these questions will lead to one of the main choices that you’ll make when designing a network stack for your game.</p>

<h3 id="server-with-logic">Server with logic</h3>

<p>This is the first type of server, and probably the most common one. I bet that if you’d ask 10 gamers what a multi-player server
roughly does, this is what most of them will describe.</p>

<p>It is often a machine (or part of a machine) that all the players (clients) connect to.
It that manages all the data and everything that happens in the game.
It keeps all the game state and ensures that all communication to the clients is happening properly.</p>

<p>The main benefit is that the server owner (most often the developer) is in full control of the game and everything that happens within it.</p>

<h3 id="peer-to-peer">Peer-to-peer</h3>

<p>With this approach, there simply is no server that runs game logic. A common peer-to-peer approach in gaming is that of master/slave:</p>

<p>All the clients would vote for - and elect - a “session master”. This machine would basically act as a server. To ensure that this
special client wouldn’t be cheating, the other clients can still observe it and vote to un-elect this machine if things don’t appear
to be going in order.</p>

<p>Another problem is that this session master would possibly get increased traffic in certain kinds of scenarios, like that of a first person shooter game.</p>

<p>Peer-to-peer games might still have <em>some</em> kind of server in their toolbox.
For example: when there is a need of a lobby mechanism, a friend list, analytics, etc.</p>

<h3 id="server-as-multicasting-component-no-logic">Server as multicasting component (no logic)</h3>

<p>Although this isn’t entirely an approach on its own, a multi-casting server can be a tool for a serverless network setup.
In the case of a peer-to-peer approach, it can help with the heavy lifting on the session master: The session master can
leverage this machine to multicast messages to all the other clients, without sacrificing too much of its own bandwidth.</p>

<h2 id="network-protocols">Network Protocols</h2>

<p>Most games probably will solely rely on TCP/IP for its networking stack. This ensures that data arrives in order, or that it even arrives at all.
Connections can still fail, of course, but at least the client knows it when data fails to send.</p>

<p>With UDP, this is different: Not only are you unsure about whether data (packets) arrive at their destination at all.
There is also no guarantee about the order in which data is received, or even how many times a specific packet of data is received!
The main reason to pick UDP would be due to its reduced latency. All that reliability of TCP costs extra bandwidth,
because the recipient of the data must somehow acknowledge that data is received. UDP doesn’t have that kind of overhead.</p>

<p>To get best of both worlds, TCP and UDP can be combined.
For example: You could send the audio data from a voice chat over UDP, while there is also an active control channel that manages some meta-data about the UDP link.</p>

<p>Another hybrid approach is <em>reliable UDP</em>, which uses UDP to create a reliable data connection. In this case you might increase
your bandwidth and/or latency to resolve some of the reliability issues that a plain UDP protocol has. An example would be the acknowledgment of
received packages. When a package is not acknowledged by the receiver, the sender can then retry sending it.
Unlike with TCP/IP, a UDP protocol like this will retain full control over how this error-handling is done. With TPC/IP, such a failure to send
would result in either a connection that stalls, or perhaps even disconnects! With a reliable UDP protocol, we can chose by ourselves which error scenarios
are critical.</p>

<h2 id="how-much-data">How much data?</h2>

<p>Bandwidth is less of a consideration these days than it was before. In the 90s and early 2000s, bandwidth was simply a hard limitation.
Games would often be designed to transfer at a rate of at most <code class="language-plaintext highlighter-rouge">56 kBps</code>, because otherwise it would affect the target market.
These days, most of us have broadband available. We’ll still have to deal with differences in latency, though. Especially when it
comes to mobile gaming, when the user is traveling with his device.</p>

<p>Bandwidth, however, is never free. More data might also negatively affect that precious latency, which can be crucial for
game types that are fast-paced.</p>

<p>So how much data do you expect to send from each client? And how much does the server need to handle?
Do you need to send a lot of updates in a second? Perhaps you have large amount of game entities that all move around?
Will it require a lot of CPU capacity to process all that?</p>

<p>All these questions will influence the model of the data that you will come up with. For example: a real-time strategy
game might have hundreds of game entities moving along your screen. It might not be feasible to send updates for all
these entities to the server at a high speed rate.</p>

<h2 id="cheating-and-other-forms-of-abuse">Cheating and other forms of abuse</h2>

<p>Catching cheaters and hackers in your game is one of the more difficult tasks. Banning the wrong person can be damaging to your brand or product.</p>

<p>While guarding against malicious usage should be a consideration during the game design phase,
your network stack will also affect how much control you’ll have over these scenarios:
The more control you have over the network stack, the easier it will be to deal with cheaters and abuse.</p>

<p>Since anti-cheating is a form of security, we must consider the security principle of: <em>Never trust the client-side application</em>.
In other words: You don’t know what a user does with your application, or whether he’s even using the application that <em>you</em> built.
Or that it is used without modifications, or using it in the way that <em>you</em> thought up.</p>

<p>With that in mind, you can guess that a peer-to-peer approach is the riskiest when it comes to guarding your project.
Since the clients <em>are</em> the server, the server might also be compromised. In this scenario, the clients might guard against
a potentially malicious server. Perhaps they could even report potentially malicious servers… this reporting mechanic by itself
could then be abused, by a bunch of malicious clients: these clients could join a game and vote another user onto a ban list of some sort.
As you can see: it’s complicated!</p>

<p>When a player breaks the game rules, it’s often easily visible to the players (and the server). In these scenario’s, it’s
relatively easy to guard against it. When cheaters mimic real-world network scenarios, it becomes much harder.
For example: a player connected to a wired network in a peer-to-peer game might use a foot switch to control when the outgoing data can exit his network.
Imagine this player is in a first person shooter game, and he’s about to go around the corner to see (and attack) an opponent.
He disconnects the receiving end of the network cable with his foot, walks around the corner, and shoots his opponent.
His opponent didn’t receive his position, so he doesn’t even know he’s lost yet!
At first, this looks like regular lag, but it starts to become more suspicious when it happens more often…</p>

<h2 id="so-which-approach-is-the-right-one">So which approach is the right one?</h2>

<p>In the end, your network stack design will depends on a lot of factors. While some games have more obvious approaches than others,
I don’t think there is no cookie-cutter answer on how to tackle it.
Instead of trying to give you such answer, here’s a summation of the main questions that will help you decide on your own stack:</p>

<ul>
  <li>What kind of game do you have? (RPG/RTS/shooter/TCG/etc.)</li>
  <li>What kind of data (and how much) is going on in a game? (how many players? how many active games at once?)</li>
  <li>How much money are you willing to spend? (on servers? on development?)</li>
  <li>How much control do you need? (in terms of your product/market, but also anti-cheating)</li>
</ul>

<p>That’s it! I hope this is useful to someone out there…
If you’d like to send me feedback, you can find my contact info on my personal <a href="https://kenvanhoeylandt.net">website</a>.</p>

<p>Happy development!</p>]]></content><author><name></name></author><category term="posts" /><summary type="html"><![CDATA[The topic of gaming and networking was brought up on the KorGE Discord server. This made me think about the various forms of networking stacks that I’ve encountered in the past years, and some of the different considerations for their development. The intention of this article is to give a glimpse into various approaches and considerations. It’s likely not complete or perfect, but I hope it will be useful for developers that are somewhat new to networking for games.]]></summary></entry><entry><title type="html">Building a charging case</title><link href="/posts/2020/08/14/building-a-charging-case.html" rel="alternate" type="text/html" title="Building a charging case" /><published>2020-08-14T02:00:00+02:00</published><updated>2023-05-20T22:00:00+02:00</updated><id>/posts/2020/08/14/building-a-charging-case</id><content type="html" xml:base="/posts/2020/08/14/building-a-charging-case.html"><![CDATA[<p>I will take you through the steps I took to create a charging case for 3 chargers.
I hope you enjoy reading about my successes, findings and failures.</p>

<!--more-->

<p><img src="/assets/images/posts/charging-case/20_done.jpg" alt="finished charging case" class="center" /></p>

<p><strong>Materials used:</strong></p>

<ul>
  <li>3x compact lipo charger (ISDT Q6 in my case)</li>
  <li>a case that is large enough to hold everything (mine was <code class="language-plaintext highlighter-rouge">464 x 366 x 176 mm</code> internally, type “MAX 430S” on Amazon)</li>
  <li>various electrical wire (silicon sleeved, I used <code class="language-plaintext highlighter-rouge">14 AWG</code> for the power delivery spec that I wanted)</li>
  <li>3x balance connector distribution board (search on AliExpress for “B6AC A6 Charger”)</li>
  <li>power distribution board (optional)</li>
  <li>6x <code class="language-plaintext highlighter-rouge">40 mm</code> fan (can be more/less, depending on your ventilation requirements)</li>
  <li>6x fan cover (e.g. plastic mesh)</li>
  <li>switching power supply (<code class="language-plaintext highlighter-rouge">24 V</code> and <code class="language-plaintext highlighter-rouge">15 A</code>)</li>
  <li>top plate material (e.g. triplex)</li>
  <li>a bunch of XT60 and XT30 connectors, including 3x top-mounted XT60 (see pics below)</li>
  <li><code class="language-plaintext highlighter-rouge">220 V</code> power outlet with switch and fuse (the same one as the Ender 3 Pro comes with)</li>
</ul>

<p>(note: this might be incomplete)</p>

<p><strong>These are some of the tools that I remember using:</strong></p>

<ul>
  <li>Soldering iron</li>
  <li>3D printer (optional)</li>
  <li>Hot glue gun</li>
  <li>Wire cutters</li>
  <li>Knife</li>
  <li>Heat gun (optional)</li>
  <li>Tweezers and soldering stand</li>
  <li>Multimeter</li>
  <li>Something to cut out the top plate (e.g. drill, jigsaw and Dremel**</li>
</ul>

<p><strong>I also designed some parts:</strong></p>

<ul>
  <li>ISDT Q6 bracket: <a href="/assets/images/posts/charging-case/isdt_q6_bracket.stl">STL</a>, <a href="/assets/images/posts/charging-case/isdt_q6_bracket.FCStd">FreeCAD</a></li>
  <li>Balance board support plate: <a href="/assets/images/posts/charging-case/balance_board_plate.stl">STL</a>, <a href="/assets/images/posts/charging-case/balance_board_plate.FCStd">FreeCAD</a></li>
</ul>

<p>These parts are optional, as you can also use pieces of wood or plexiglass to construct something similar.</p>

<p>The total cost as about EUR 250 with the ISDT chargers. Half of that amount was just the cost of the chargers,
so buying a cheaper charger could save some money. I also bought some components that were optional (PDB, more fans, etc.)
You could probably bring the total down to slightly below EUR 200 if you’re making some different choices here and there.</p>

<h1 id="steps">Steps</h1>

<p>First, I bought a case. It was relatively cheap, and the only downside was that it is a bit heavy:</p>

<p><img src="/assets/images/posts/charging-case/1_case_closed.jpg" alt="closed case" class="center" /></p>

<p><img src="/assets/images/posts/charging-case/1_case_open.jpg" alt="open case" class="center" /></p>

<p>The next step was to start creating a bottom plate. I wanted to keep it detachable, so I bought some 3M Dual Lock.
I added a bit too much in retrospect, so when I detach the plate, sometimes the sticky tape comes off rather than the
Dual Lock:</p>

<p><img src="/assets/images/posts/charging-case/2_bottom_plate.jpg" alt="bottom plate" class="center" /></p>

<p>On this bottom plate, I added the switching power supply. The main consideration here was to have it placed in such a way
that the combined airflow of the power supply unit (PSU) was working well with the airflow of the chargers. Another
consideration was how the placement would affect the center of gravity of the case, so it would be nice to carry.</p>

<p>I mounted the PSU on the wooden plate with standoffs, so that the airflow would be better. I also wanted to make sure that
if the power supply ever got really hot (which I don’t expect), it wouldn’t be touching the wood:</p>

<p><img src="/assets/images/posts/charging-case/3_psu_on_bottom_plate_a.jpg" alt="power supply mounted" class="center" /></p>

<p>Here it is placed in the case:</p>

<p><img src="/assets/images/posts/charging-case/3_psu_on_bottom_plate_b.jpg" alt="power supply mounted" class="center" /></p>

<p>Similarly, I created a top plate. It rests nicely on the rim of the case, and due to the design of the case, the lid
still closes perfectly.</p>

<p><img src="/assets/images/posts/charging-case/3_top_plate.jpg" alt="top plate" class="center" /></p>

<p>I drew some edges on it, to visualize how much actual space was usable. That way, I wouldn’t be hitting the side of the case:</p>

<p><img src="/assets/images/posts/charging-case/4_top_plate_edge.jpg" alt="top plate with edge marked" class="center" /></p>

<p>I made many sketches on paper before picking my preferred layout. I laid some of the components on the paper to see if it would
work well. The considerations were: airflow, wire connections (amount of wire needed), space during charging (how close is
everything to each other).</p>

<p>After that was done, I transferred my layout to the top plate:</p>

<p><img src="/assets/images/posts/charging-case/5_top_plate_layout_create.jpg" alt="top plate with layout drawn on it" class="center" /></p>

<p>And of course I verified it by adding the components on top:</p>

<p><img src="/assets/images/posts/charging-case/6_top_plate_layout_verify.jpg" alt="top plate with components on top" class="center" /></p>

<p>At this point, I started prepping wires already. This would allow me to already connect the chargers and start charging.
That way, I didn’t have to wait to the end of the project until I’d have a functioning charging setup!</p>

<p><img src="/assets/images/posts/charging-case/7_prep_wires.jpg" alt="wires prepped" class="center" /></p>

<p>As you can see, the rig was already functionally usable:</p>

<p><img src="/assets/images/posts/charging-case/8_already_usable.jpg" alt="functional chargers" class="center" /></p>

<p>I wanted a single wire to go from the PSU to the rest of the electronics. This allows me to easily disconnect the electronics
on the top plate from the PSU on the bottom for maintenance and testing. In theory, I could just solder all the XT60 connectors
together, in parallel, and be done with it. I chose another path and bought a power distribution board (PDB) to make the job a bit prettier.
This PDB also comes with a BEC, so I could easily add some LEDs to the case later, or add more electronics that require a lower voltage.</p>

<p>To this PDB, I added some extra BECs (step down converters) that will drive the fans. They are separate, as I need more current from it
than the PDB will give me. The BECs allow me to regulate the voltage, effectively allowing me to change the speed of the fans.</p>

<p>I am adding XT60 and XT30 connectors, because I want the entire thing to be modular and easy to disassemble:</p>

<p><img src="/assets/images/posts/charging-case/9_power_distribution.jpg" alt="PDB and BECs" class="center" /></p>

<p>Originally, I had only 1 BEC. This provided insufficient power to start rotating all fans at the same time.
I added a second BEC to solve this problem, but in the end it was still insufficient. The proper fix would be to have a setup
where each fan gets its own switch. That way, they can all individually get their needed current spike to start spinning - but
not at least not at the same time!</p>

<p><img src="/assets/images/posts/charging-case/11_cooling_becs.jpg" alt="PDB, BECs and fans" class="center" /></p>

<p>At this point I started cutting out the top plate:</p>

<p><img src="/assets/images/posts/charging-case/12_top_plate_cutting.jpg" alt="top plate cut out" class="center" /></p>

<p>Because I used triplex wood, and I’m not super experienced with it, the wood partially disintegrated when cutting into it.
I used some 2 component epoxy filler to fix most of it:</p>

<p><img src="/assets/images/posts/charging-case/13_top_plate_filling.jpg" alt="top plate touch up" class="center" /></p>

<p>To finish the top plate, I painted it black:</p>

<p><img src="/assets/images/posts/charging-case/14_top_plate_finished.jpg" alt="top plate finished" class="center" /></p>

<p>Also the fans were mounted:</p>

<p><img src="/assets/images/posts/charging-case/15_top_plate_mounting.jpg" alt="top plate with fans and PDB" class="center" /></p>

<p>Then the XT60 top-mounted connectors were added:</p>

<p><img src="/assets/images/posts/charging-case/16_top_plate_fitting.jpg" alt="top plate with XT60 connectors" class="center" /></p>

<p>Because the chargers were shaped irregularly, and I needed to support the balance boards with something, I designed and
printed out some parts. You can also buy some wood or plexiglass and cut out similar parts by hand. I used 2 component
epoxy filler (yes, filler) to glue the charger brackets on:</p>

<p><img src="/assets/images/posts/charging-case/17_printed_brackets.jpg" alt="top plate with charger brackets" class="center" /></p>

<p>Then I put the balance charging cables in place and glued in the supports for the balance board:</p>

<p><img src="/assets/images/posts/charging-case/18_balance_done_a.jpg" alt="top plate with balance charging setup" class="center" /></p>

<p><img src="/assets/images/posts/charging-case/18_balance_done_b.jpg" alt="top plate with balance charging setup" class="center" /></p>

<p>The lasts step was to connect everything:</p>

<p><img src="/assets/images/posts/charging-case/19_wired_all.jpg" alt="everything connected" class="center" /></p>

<p>And then the project was finished:</p>

<p><img src="/assets/images/posts/charging-case/20_done.jpg" alt="finished charging case" class="center" /></p>]]></content><author><name></name></author><category term="posts" /><summary type="html"><![CDATA[I will take you through the steps I took to create a charging case for 3 chargers. I hope you enjoy reading about my successes, findings and failures.]]></summary></entry><entry><title type="html">ESC fuse fix</title><link href="/posts/2020/06/30/esc-fuse-fix.html" rel="alternate" type="text/html" title="ESC fuse fix" /><published>2020-06-30T02:00:00+02:00</published><updated>2023-05-20T22:00:00+02:00</updated><id>/posts/2020/06/30/esc-fuse-fix</id><content type="html" xml:base="/posts/2020/06/30/esc-fuse-fix.html"><![CDATA[<p>I ordered a bunch of <code class="language-plaintext highlighter-rouge">RushFPV Mini Tank Stacks</code> that were rated for <code class="language-plaintext highlighter-rouge">30 A</code> and connected them to some <code class="language-plaintext highlighter-rouge">DYS Samguk 2600 Kv</code>
motors <em>without propellers</em>. This minimal load blew the fuse on the ESC, making the ESC unusable.
The result was that BetaFlight showed <code class="language-plaintext highlighter-rouge">0.01 V</code> when a lipo was connected.</p>

<!--more-->

<p>A friendly RushFPV customer support representative stated that this stack wasn’t meant for <code class="language-plaintext highlighter-rouge">5"</code> quadcopters and motors with
such high <code class="language-plaintext highlighter-rouge">Kv</code> values. In my opinion, <code class="language-plaintext highlighter-rouge">30 A</code> is <code class="language-plaintext highlighter-rouge">30 A</code>, regardless of motor size, so I’m still under the impression
that this stack just can’t deliver what it says on the specifications.
Thanks to the help of the RushFPV CSR, I was advised to bridge the fuse.
I was given some pictures as a guide, but decided to make a comprehensive photo write-up myself.</p>

<p>These are the tools that I used:</p>

<ul>
  <li>ultra-fine tweezers</li>
  <li>soldering iron with (thin) chisel tip</li>
  <li>copper wire (preferably single core)</li>
  <li>clippers</li>
</ul>

<p>If you plan to fix your own ESC, you should understand that removing the fuse (and shorting/bridging it) means that there is nothing preventing damage to the ESC if too much current is pulled through it. It can lead to smoke and fire if you abuse the ESC beyond its limits without this safety net.</p>

<p>First, let’s take a look at the fuse itself. It’s the green SMD component on the ESC:</p>

<p><img src="/assets/images/posts/esc-fuse-fix/01_fuse.jpg" alt="broken fuse on PCB" class="center" /></p>

<p>As mentioned in the list of tools, I used a fine chisel tip:</p>

<p><img src="/assets/images/posts/esc-fuse-fix/02_tool_chisel.jpg" alt="soldering iron chisel tip" class="center" /></p>

<p>Use the clippers to splice the wire length-wise. Then cut a smaller piece off that is a bit smaller than
the size of the fuse:</p>

<p><img src="/assets/images/posts/esc-fuse-fix/03_wire_cut_small.jpg" alt="copper wire with piece cut off" class="center" /></p>

<p>Have your soldering iron on high heat (I put mine on <code class="language-plaintext highlighter-rouge">425 C</code>) and add a little bit of solder.
This solder will help spread the heat on the SMD component:</p>

<p><img src="/assets/images/posts/esc-fuse-fix/04_solder.jpg" alt="chisel tip with solder" class="center" /></p>

<p>Start holding the fuse with the tweezers. Don’t put a lot of force on it, but make sure you grab hold of it:</p>

<p><img src="/assets/images/posts/esc-fuse-fix/05_hold_fuse.jpg" alt="holding fuse with tweezers" class="center" /></p>

<p>Bring the soldering iron to the fuse (don’t push hard) and gently pull the fuse off with the tweezers:</p>

<p><img src="/assets/images/posts/esc-fuse-fix/06_lift_fuse.jpg" alt="fuse pulled off with tweezers" class="center" /></p>

<p>The ESC will now look like this:</p>

<p><img src="/assets/images/posts/esc-fuse-fix/07_lifted.jpg" alt="ESC without fuse" class="center" /></p>

<p>Add some fresh solder to the fuse pads. I used the sharp end of the chisel tip to set down my iron
in a stable manner, and then I fed a little bit of solder into it:</p>

<p><img src="/assets/images/posts/esc-fuse-fix/08_tin.jpg" alt="ESC with tinned pads" class="center" /></p>

<p>Now place the tiny piece of copper wire, with the flat side down, between the ESC fuse pads.</p>

<p><img src="/assets/images/posts/esc-fuse-fix/09_bridge.jpg" alt="copper wire between ESC fuse pads" class="center" /></p>

<p>Before you put the soldering iron down, make sure that you have some grip on the wire, as it will start
sliding a bit when the solder is flowing. To solder it, just put your iron down on the copper bit and
let the heat of the copper conduct into the solder and melt the solder into the copper:</p>

<p><img src="/assets/images/posts/esc-fuse-fix/10_finish.jpg" alt="ESC with bridged fuse" class="center" /></p>

<p>That’s it, you’ve now bridged the fuse!</p>

<p>You can test as follows:</p>

<ol>
  <li>Continuity test on fuse and ESC battery pads.</li>
  <li>Power on the ESC with a battery and a smoke stopper.</li>
  <li>Remove battery power, add the FC and do another power on test with the smoke stopper.</li>
  <li>Remove battery power, connect setup through USB, re-connect power (with smoke stopper) and verify the voltage readout in BetaFlight</li>
</ol>]]></content><author><name></name></author><category term="posts" /><summary type="html"><![CDATA[I ordered a bunch of RushFPV Mini Tank Stacks that were rated for 30 A and connected them to some DYS Samguk 2600 Kv motors without propellers. This minimal load blew the fuse on the ESC, making the ESC unusable. The result was that BetaFlight showed 0.01 V when a lipo was connected.]]></summary></entry><entry><title type="html">Making a Li-Ion battery pack</title><link href="/posts/2020/06/06/li-ion-battery-pack.html" rel="alternate" type="text/html" title="Making a Li-Ion battery pack" /><published>2020-06-06T02:00:00+02:00</published><updated>2023-05-20T22:00:00+02:00</updated><id>/posts/2020/06/06/li-ion-battery-pack</id><content type="html" xml:base="/posts/2020/06/06/li-ion-battery-pack.html"><![CDATA[<p>This post shows the steps involved in making a <code class="language-plaintext highlighter-rouge">2S</code> pack with <code class="language-plaintext highlighter-rouge">21700</code> cells.
This guide is also relevant for constructing with <code class="language-plaintext highlighter-rouge">18650</code> cells.</p>

<!--more-->

<p>Materials needed:</p>
<ul>
  <li>2x <code class="language-plaintext highlighter-rouge">18650</code> or <code class="language-plaintext highlighter-rouge">21700</code> cells (they must both be exactly the same cell!)</li>
  <li>Large shrink tube (alternative: electrical tape)</li>
  <li>A balance plug and wire for it (or balance extension cord that you cut)</li>
  <li>18 AWG wire (can be thicker if you need more amps)</li>
</ul>

<p>Let’s first list the tools that I used:</p>

<ul>
  <li>Soldering iron</li>
  <li>Hot glue gun</li>
  <li>Wire cutters</li>
  <li>Knife</li>
  <li>Heat gun (optional)</li>
  <li>Tweezers and soldering stand (optional)</li>
  <li>Multimeter</li>
</ul>

<h1 id="before-you-begin">Before you begin</h1>

<p>Making a battery pack is dangerous. Ensure that you have a basic understanding electricity and lipo &amp; li-ion battery tech.
This guide might not be perfect, so proceed at your own risk.
Using battery cells incorrectly may lead to fire and physical harm. Treat them with the respect that they deserve.
The author is not responsible for any damage or harm that may happen from following the steps in this document.</p>

<h1 id="steps">Steps</h1>

<p>First we start with two identical cells. These are Samsung <code class="language-plaintext highlighter-rouge">INR21700-50E</code> cells:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/01_start.jpg" alt="2 Samsung 21700 cells " class="center" /></p>

<p>You can find the specifications of these cells <a href="https://lygte-info.dk/review/batteries2012/Samsung%20INR21700-50E%205000mAh%20(Cyan)%20UK.html">here</a>.</p>

<p>Before we actually start, please note that all wires should be pre-tinned.
This will make it much easier to combine the components:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/02_prep.jpg" alt="2 pre-tinned wires" class="center" /></p>

<p>Now put the cells together. They must touch each other. I used 2 coasters to help me with that.
You can then use a tool to align them vertically:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/03_arrange.jpg" alt="2 cells laying flat and aligned" class="center" /></p>

<p>Carefully apply hot glue on one side of the cells. Make sure your glue gun doesn’t touch the cells,
so you don’t melt the plastic wrapper. Let it dry for 30-60 seconds and then do the other side too:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/04_glue.jpg" alt="2 cells with hot glue" class="center" /></p>

<p>Since I don’t have a spot, I need to solder them regularly.
Before we can add solder to the cells, we need to remove the oxidised layer from the cells.
I do this by scraping carefully with a knife. But the cell flat on the table and start scraping at
the center of the contact point.</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/05_roughen.jpg" alt="2 cells with knife" class="center" /></p>

<p>Heat the soldering iron to <code class="language-plaintext highlighter-rouge">450 C</code> (<code class="language-plaintext highlighter-rouge">842 F</code>). Less might also work, but this is the temperature that I used.
Put some solder on your iron, then put the soldering iron on the cell, then add a bunch more solder:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/06_solder.jpg" alt="2 cells, 1 with solder" class="center" /></p>

<p>Let it cool and then clean off the resin:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/07_clean.jpg" alt="2 cells, 1 with clean solder" class="center" /></p>

<p>You can test the strength of your weld by applying force with a knife on the edge of the solder.
I had to hold my camera to take a picture, but you should hold the batteries with one hand, and then carefully
apply a few kilograms of force with the other hand. Be careful to not cut yourself.</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/08_strength.jpg" alt="testing solder weld strength with a knife" class="center" /></p>

<p>Repeat the knife scraping, soldering, cleaning and strength testing for all 4 contact points:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/09_solder_all.jpg" alt="2 cells both with solder" class="center" /></p>

<p>Cut a small piece of wire to length to connect 2 battery cells in the back:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/10_bridge.jpg" alt="2 cells with wire connecting them" class="center" /></p>

<p>Make a <code class="language-plaintext highlighter-rouge">2S</code> (3-pin) balance cable to length, or cut one from an existing balance extension cable:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/11_balance_measure.jpg" alt="measuring a balance cable" class="center" /></p>

<p><img src="/assets/images/posts/li-ion-battery-pack/12_balance_cut.jpg" alt="prepared balance cable" class="center" /></p>

<p>Solder the center cable of the balance connector to the back of the battery:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/13_balance_solder.jpg" alt="center wire of balance cable is soldered" class="center" /></p>

<p><img src="/assets/images/posts/li-ion-battery-pack/14_balance_solder_detail.jpg" alt="close-up of soldered balance cable" class="center" /></p>

<p>Fasten the balance cable with some hot glue. This will make it easier to work with:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/15_fasten.jpg" alt="balance cable is glued with hot glue" class="center" /></p>

<p>Measure and cut the remaining 2 wires of the balance cable. Make sure the red cable goes
to the positive side of the cell, and the black cable goes to the negative side of the other cell:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/16_measure.jpg" alt="measuring balance cable before cutting" class="center" /></p>

<p>Then solder the two balance cables onto the cells:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/17_solder_balance.jpg" alt="balance cable is fully soldered" class="center" /></p>

<p>Now solder an XT30 connector to the same contacts:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/18_solder_xt30.jpg" alt="XT30 soldered onto cells" class="center" /></p>

<p>We’re about to make some covers to protect the top and bottom of the battery pack.
Take some double-sided tape, cut it to length. Then apply kapton tape (or electrical tape?) on one side.</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/19_protective_cover_prep.jpg" alt="double-sided tape and kapton tape" class="center" /></p>

<p><img src="/assets/images/posts/li-ion-battery-pack/20_protective_cover_applied.jpg" alt="tape applied to cells" class="center" /></p>

<p>Measure some shrink tube. It should stick out about 8-10mm on each end of the cells:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/20_shrink_tube_measuring.jpg" alt="2 cells with shrink tube to measure" class="center" /></p>

<p>Hold the lipo by all of its wires and use the heat gun to carefully heat the shrink tube.
Your pack is now finished:</p>

<p><img src="/assets/images/posts/li-ion-battery-pack/21_shrink_tube_finished.jpg" alt="finished battery pack" class="center" /></p>

<p>Since we used Samsung <code class="language-plaintext highlighter-rouge">INR21700-50E</code> cells, this battery pack is a <code class="language-plaintext highlighter-rouge">2S</code> pack with <code class="language-plaintext highlighter-rouge">5000 mAh</code>. Even though these are <code class="language-plaintext highlighter-rouge">Li-Ion</code> cells, they are charged to <code class="language-plaintext highlighter-rouge">4.2 V</code>. The cut-off voltage is a mere <code class="language-plaintext highlighter-rouge">2.5 V</code>! You can charge at maximum <code class="language-plaintext highlighter-rouge">4900 mA</code>, but it’s advised to charge them slower. They can be discharged at <code class="language-plaintext highlighter-rouge">9800 mAh</code> continuously, or <code class="language-plaintext highlighter-rouge">14700 mA</code> pulse. (according to <a href="https://lygte-info.dk/review/batteries2012/Samsung%20INR21700-50E%205000mAh%20(Cyan)%20UK.html">this page</a>)</p>

<p>When using different cells than the ones above, make sure to look up the the specifications of these cells.
The voltages and currents will very likely be different.</p>]]></content><author><name></name></author><category term="posts" /><summary type="html"><![CDATA[This post shows the steps involved in making a 2S pack with 21700 cells. This guide is also relevant for constructing with 18650 cells.]]></summary></entry><entry><title type="html">Upgrading your merge requests</title><link href="/posts/2020/02/26/upgrading-your-merge-requests.html" rel="alternate" type="text/html" title="Upgrading your merge requests" /><published>2020-02-26T23:00:00+01:00</published><updated>2020-02-26T23:00:00+01:00</updated><id>/posts/2020/02/26/upgrading-your-merge-requests</id><content type="html" xml:base="/posts/2020/02/26/upgrading-your-merge-requests.html"><![CDATA[<p>I did a write-up on how to improve merge request (or pull request) quality control on <a href="https://medium.com/ing-blog/upgrading-your-merge-requests-fe5e953b2f93">ING’s Medium Blog</a>.</p>]]></content><author><name></name></author><category term="posts" /><summary type="html"><![CDATA[I did a write-up on how to improve merge request (or pull request) quality control on ING’s Medium Blog.]]></summary></entry></feed>